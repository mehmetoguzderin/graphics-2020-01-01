#version 450

layout (local_size_x = 8, local_size_y = 8, local_size_z = 4) in;

layout(std140, set = 0, binding = 0) uniform Context {
    float time;
} context;
layout(set = 0, binding = 1) uniform sampler context_sampler;
layout (set = 1, binding = 0, rgba32f) uniform readonly image2D plan;
layout(set = 2, binding = 0) uniform texture2D text;
layout (set = 3, binding = 0, r16f) uniform image3D raid;

void main() {
    vec3 origin = vec3(0.0, -0.25, 0.125);
    vec3 object = vec3(0.0, 1.0, 0.0);
    vec3 direction = imageLoad(plan, ivec2(gl_GlobalInvocationID.xy)).xyz;
    float space = imageLoad(plan, ivec2(gl_GlobalInvocationID.xy)).w;
    origin += direction * space * float(gl_GlobalInvocationID.z);
    float hit = 0.0;
    for (float a = 0; a < 3.14159265359; a += 0.78539816339) {
        for (float b = 0; b < 6.28318530718; b += 0.78539816339) {
            vec3 indirection = vec3(sin(a) * cos(b), sin(a) * sin(b), cos(b));
            float offset = (object.y - origin.y) / indirection.y;
            if (offset > 0.0) {
                vec3 path = indirection * offset;
                float attenuation = 0.125 - sin(context.time) * 0.25 + 0.25;
                float size = length(path);
                size = attenuation - size;
                size /= attenuation;
                size = max(size, 0.0);
                size *= size;
                size *= size;
                float angle = dot(indirection, vec3(0.0, 1.0, 0.0));
                angle *= dot(indirection, direction);
                hit += texture(sampler2D(text, context_sampler), ((origin + path).xz * vec2(0.5, -0.5) + vec2(0.5, 0.5))).a * angle * size;
            }
        }
    }
    hit *= 0.03125;
    hit *= 512.0 - sin(context.time) * 256;
    imageStore(raid, ivec3(gl_GlobalInvocationID.xyz), vec4(hit));
}